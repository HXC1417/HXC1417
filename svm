#include<opencv4/opencv2/opencv.hpp>
#include<iostream>
#include<bits/stdc++.h>
#include<math.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
using namespace std;
using namespace cv;
using namespace cv::ml;

int main()
{
    Mat mask;
    Mat result;

	Mat image = imread("1.jpg",0);
    Mat img_show = image.clone();
    imshow("frame",img_show);

    Mat element = getStructuringElement(MORPH_RECT, Size(3,3));
    
    erode(image, mask, element);     
    //imshow("ero",mask); 

    threshold(mask, result, 130, 255, THRESH_BINARY);
    blur(result, image, Size(1,1));
   
	Ptr<SVM> svm = StatModel::load<SVM>("/home/cheng10051/photo/mnist_svm.xml");
	


    vector<vector<Point>> contours;
    vector<Vec4i> hierarchy;
    findContours(result, contours, hierarchy, RETR_LIST, CHAIN_APPROX_NONE);
    
    if( !contours.empty() && !hierarchy.empty() ){    
        vector<vector<Point> >::iterator it;
        for( it = contours.begin(); it != contours.end(); ){  
            //按轮廓长度筛选
            if( arcLength(*it, true) < 66)
                contours.erase(it);
            else it ++;
        }
    }


    vector<Rect> boundRect(contours.size()); 
    for(int i = 0; i< contours.size(); i++){ 
        boundRect[i] = boundingRect(contours[i]); 
        //框出轮廓 
        rectangle(img_show, boundRect[i].tl(), boundRect[i].br(), Scalar(255, 255, 255), 1);

        Mat roi = img_show(boundRect[i]);
        resize(roi,roi,Size(28,28));

        //更换数据类型有uchar->float32
	    roi.convertTo(roi, CV_32FC1);
	    //归一化
	    roi = roi / 255.0;
	    //(1,784)
	    roi = roi.reshape(1, 1);

        //预测图片
	    int ret = svm->predict(roi);
	    cout << ret << endl;
        

        
    }

	imshow("img", img_show);
	waitKey(0);

    return 0;

}
